using System;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace RequestForMirror.Editor.CodeGen
{
    public class GeneratedScriptPostProcessor : AssetPostprocessor
    {
        private static void OnPostprocessAllAssets(
            string[] importedAssets, 
            string[] deletedAssets, 
            string[] movedAssets,
            string[] movedFromAssetPaths)
        {
            if (deletedAssets.Length < 1) return;
            var settings = CodeGen.LoadSettingsAsset();
            var generatedFileNames = settings.generatedFiles.Select(Path.GetFileName).ToArray();
            
            foreach (var deletedAsset in deletedAssets)
            {
                var deletedFileName = Path.GetFileName(deletedAsset);
                if (!generatedFileNames.Contains(deletedFileName)) continue;
                
                var generatedAsset = new ScriptAsset(CodeGen.GeneratedFolder, deletedFileName);
                if (generatedAsset.Delete())
                {
                    settings.generatedFiles.Remove(generatedAsset.CsPath);
                    if (settings.debugMode)
                        Debug.Log($"Deleting autogenerated file: {generatedAsset.CsPath} (initiated by user)");
                }
                
                #if MODULA //regenerate RequestManager in case it's a module that has been deleted.
                RequestManagerGenerator.GenerateScripts(generatedAsset.Classname);
                #endif
            }
        }
        
        
        
        
        
        
        
        // protected void OnPreprocessAsset()
        // {
        //     Debug.Log("My Asset Postprocessor has been loaded.");
        //     var typeNames = CodeGen.GetTypes().Select(t => t.Name);
        //     if (assetPath.EndsWith(".cs", StringComparison.OrdinalIgnoreCase))
        //     {
        //
        //     }
        // }
    }
}